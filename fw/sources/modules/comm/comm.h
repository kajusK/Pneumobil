/*
    BUT pneumobil - Copyright (C) 2018 Jakub Kaderka.

    This file is part of BUT pneumobil.

    BUT pneumobil is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    BUT pneumobil is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @file    comm.h
 * @brief   Communication protocol
 *
 * @addtogroup modules-comm
 * @{
 */

#ifndef __MODULES_COMM_H
#define __MODULES_COMM_H

#include <types.h>
#include <version.h>

/** Maximum allowed payload length that can be received (up to 0xff) */
#define COMM_MAX_PAYLOAD_LEN 0xfe

/** Communication node ids, used for CAN addressing */
typedef enum {
    COMM_NODE_DEBUG = 0x00,
    COMM_NODE_PSU = 0x01,
    COMM_NODE_HMI = 0x02,
    COMM_NODE_ECU = 0x03,
    COMM_NODE_SDU = 0x04,
    COMM_NODE_UNKNOWN = 0x05,
    COMM_NODE_BROADCAST = 0x0f,    /* For transmission only */
} comm_node_t;

/** Communication priority, used by CAN for prioritizing messages */
typedef enum {
    COMM_PRIORITY_CRITICAL = 0x00,
    COMM_PRIORITY_NORMAL = 0x01,
    COMM_PRIORITY_LOG = 0x02,
    COMM_PRIORITY_DEBUG = 0x03
} comm_priority_t;

/** Error states during communication */
typedef enum {
    COMM_OK = 0x00,                     /** Communication was ok */
    /* errors sent in response */
    COMM_ERR_UNSUPPORTED_CMD = 0x01,    /** The command received is not implemented */
    COMM_ERR_INCORRECT_LEN = 0x02,      /** Length of the command params does not match expected value */
    COMM_ERR_INCORRECT_PARAM = 0x03,    /** Incorrect parameter value for given cmd */

    /* internal errors */
    COMM_ERR_TIMEOUT = 0x04,            /** Command timeouted */
    COMM_ERR_FORMAT = 0x05,             /** Received data format is bad */
    COMM_ERR_LINK = 0x06,               /** Failed on link layer - CRC, etc */
} comm_error_t;

/** Command IDs - autogenerated by sw/generators/comm_cmd.py */
typedef enum {
/* Generic commands*/
    COMM_CMD_SYSTEM_STATUS = 0x00,    /* Get device generic state */
    COMM_CMD_SET_LOG_MASK = 0x01,    /* Set logging mask */
    COMM_CMD_GET_LOG_MASK = 0x02,    /* Get logging mask */
    COMM_CMD_SET_CONFIG = 0x03,    /* Set configuration item */
    COMM_CMD_GET_CONFIG = 0x04,    /* Get config item value */
    COMM_CMD_RESET_CONFIG = 0x05,    /* Restart all config items to defaults */
    COMM_CMD_GET_ALL_CONFIG = 0x06,    /* Get all config items */
    COMM_CMD_LOG_MESSAGE = 0x07,    /* System log message */

/* Flash commands*/
    COMM_CMD_FLASH_VERSION = 0x10,    /* Current info about flash */
    COMM_CMD_GET_FLASH_VERSION = 0x11,    /* Get info about image stored */
    COMM_CMD_FLASH_MODE = 0x12,    /* Current flashing state */
    COMM_CMD_FLASH_INIT = 0x13,    /* Initialize flashing sequence */
    COMM_CMD_FLASH_DATA = 0x14,    /* Send data to be flashed */
    COMM_CMD_FLASH_FINISH = 0x15,    /* Finish flashing / cancel flash operation */
    COMM_CMD_REBOOT = 0x16,    /* Reboot the device */

/* ECU commands*/
    COMM_CMD_CAR_STATE = 0x20,    /* Current state of the car */
    COMM_CMD_PNEU_STATE = 0x21,    /* Current state of the pneumatic circuit */
    COMM_CMD_GPS_POSITION = 0x22,    /* Car gps position */
    COMM_CMD_TEMPS = 0x23,
    COMM_CMD_SET_MODE = 0x24,    /* Set pneumatic mode */

/* PSU commands*/
    COMM_CMD_BATTERY = 0x30,    /* Current battery state */
    COMM_CMD_CURRENTS = 0x31,    /* Currents to branches */
    COMM_CMD_VOLTAGES = 0x32,    /* Voltages of all branches */

/* HMI commands*/
} comm_cmd_id_t;

#ifdef BOARD_ECU
    #define COMM_MY_ID COMM_NODE_ECU
#elif defined BOARD_HMI
    #define COMM_MY_ID COMM_NODE_HMI
#elif defined BOARD_PSU
    #define COMM_MY_ID COMM_NODE_PSU
#elif defined BOARD_SDU
    #define COMM_MY_ID COMM_NODE_SDU
#else
    #error "BOARD_NAME must be defined"
#endif

/**
 * Initialize communication module and its submodules
 */
extern void Comm_Init(void);

#endif

/** @} */
